<!-- HTML -->
<div id="back-to-top-section">
  <button id="back-to-top-btn">
    <div class="circle-container">
      <!-- FIRST GET UP -->
      <div class="text" data-init-angle="0">G</div>
      <div class="text" data-init-angle="20">E</div>
      <div class="text" data-init-angle="40">T</div>
      <div class="text" data-init-angle="70">U</div>
      <div class="text" data-init-angle="90">P</div>
      
      <!-- SECOND GET UP -->
      <div class="text" data-init-angle="120">G</div>
      <div class="text" data-init-angle="140">E</div>
      <div class="text" data-init-angle="160">T</div>
      <div class="text" data-init-angle="190">U</div>
      <div class="text" data-init-angle="210">P</div>

      <!-- THIRD GET UP -->
      <div class="text" data-init-angle="240">G</div>
      <div class="text" data-init-angle="260">E</div>
      <div class="text" data-init-angle="280">T</div>
      <div class="text" data-init-angle="310">U</div>
      <div class="text" data-init-angle="330">P</div>

      <!-- CENTER CIRCLE WITH ARROW -->
      <div class="circle"><div class="arrow">↑</div></div>
    </div>
  </button>
</div>

<!-- CSS -->
<style>
/* BACK TO TOP SECTION STYLES */
#back-to-top-section {
  background-color: #000;
  height: 80px;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  padding: 0;
}

/* BACK TO TOP BUTTON STYLES */
#back-to-top-btn {
  background: none;
  border: none;
  cursor: pointer;
  margin: 0;
  padding: 0;
}

/* CIRCLE CONTAINER */
.circle-container {
  position: relative;
  width: 80px;
  height: 80px;
  margin: 0;
  padding: 0;
}

/* CIRCLE STYLES */
.circle {
  background-color: #000;
  border: 1px solid #fff;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  padding: 0;
}

/* ARROW STYLES */
.arrow {
  font-size: 20px;
  color: #fff;
  margin: 0;
  padding: 0;
}

/* TEXT STYLES */
.text {
  position: absolute;
  width: 100%;
  height: 100%;
  text-align: center;
  font-size: 12px;
  color: #fff;
  transform-origin: 50% 50%;
  margin: 0;
  padding: 0;
  user-select: none; /* Blokkerer tekstmarkering */
}

</style>

<!-- JAVASCRIPT -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const myButton = document.getElementById("back-to-top-btn");
    let lastScrollTop = window.pageYOffset || document.documentElement.scrollTop;
    let isInteracting = false;
    // Initialiserer med en retning som ikke endrer rotasjonen før brukeren scroller
    let rotationDirection = 0; 

    function initLetterRotations() {
        document.querySelectorAll('.text').forEach(el => {
            const initAngle = parseInt(el.getAttribute('data-init-angle'), 10);
            el.style.transform = `rotate(${initAngle}deg)`;
            el.setAttribute('data-rotation', initAngle.toString());
        });
    }

    function updateRotation(direction) {
        document.querySelectorAll('.text').forEach(el => {
            let currentRotation = parseInt(el.getAttribute('data-rotation'), 10);
            currentRotation += direction; // Oppdaterer rotasjon basert på retningen gitt
            el.style.transform = `rotate(${currentRotation}deg)`;
            el.setAttribute('data-rotation', currentRotation.toString());
        });
    }

    window.addEventListener('scroll', function() {
        const st = window.pageYOffset || document.documentElement.scrollTop;
        // Bestem retningen basert på om den siste scroll-posisjonen er større eller mindre enn den nåværende
        rotationDirection = (st > lastScrollTop) ? 1 : -1; 
        if (!isInteracting) {
            updateRotation(rotationDirection);
        }
        lastScrollTop = st;
    }, false);

    myButton.addEventListener('click', function() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });

    function handleInteractionStart() {
        isInteracting = true;
        // Bruk rotationDirection for å bestemme rotasjonens retning under interaksjon
        const performRotation = () => {
            if (isInteracting) {
                updateRotation(rotationDirection); // Fortsetter med siste kjente scroll-retning
                requestAnimationFrame(performRotation);
            }
        };
        requestAnimationFrame(performRotation);
    }

    function handleInteractionEnd() {
        isInteracting = false;
    }

    // Legger til interaksjonshåndterere for touch og musepeker
    myButton.addEventListener('touchstart', handleInteractionStart);
    window.addEventListener('touchend', handleInteractionEnd);
    myButton.addEventListener('mousedown', handleInteractionStart);
    window.addEventListener('mouseup', handleInteractionEnd);
    myButton.addEventListener('mouseenter', handleInteractionStart);
    myButton.addEventListener('mouseleave', handleInteractionEnd);

    initLetterRotations(); // Initialiserer bokstavenes rotasjon ved lasting
});
</script>
